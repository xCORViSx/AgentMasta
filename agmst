#!/usr/bin/env bash

# AgentMasta - Workspace Management Tool for Vibecoders
# This script creates new workspaces with automatic AGENTS.md or copilot-instructions.md setup
# and provides workspace management features for AI-assisted development
# and opens them in VS Code

# We define the version number for this CLI tool
VERSION="1.2.0"

# We determine where this script is installed
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# We determine where the AgentMasta repository is located
# This line will be automatically updated during installation to point to the repo
AGENTMASTA_ROOT="__AGENTMASTA_ROOT_PLACEHOLDER__"

# If we're running from the repository (not installed), use SCRIPT_DIR as the root
if [ "$AGENTMASTA_ROOT" = "__AGENTMASTA_ROOT_PLACEHOLDER__" ]; then
	AGENTMASTA_ROOT="$SCRIPT_DIR"
fi

# WORKSPACE_DIR: This is where new workspaces will be created
# You can change this with: agmst wsdir <new-path>
WORKSPACE_DIR="${HOME}/Documents/DEVshi"

# This function shows the current workspace directory
show_workspace_dir() {
	echo "üìÅ Current workspace directory: ${WORKSPACE_DIR}"
}

# This function updates the workspace directory in this script
set_workspace_dir() {
	local new_dir="$1"
	
	# We expand the tilde if present
	new_dir="${new_dir/#\~/$HOME}"
	
	# We check if the directory exists or can be created
	if [ ! -d "$new_dir" ]; then
		read -p "Directory doesn't exist. Create it? (y/N) " -n 1 -r
		echo
		if [[ $REPLY =~ ^[Yy]$ ]]; then
			mkdir -p "$new_dir" || {
				echo "‚ùå Failed to create directory"
				exit 1
			}
		else
			echo "‚ùå Cancelled"
			exit 1
		fi
	fi
	
	# We get the absolute path
	new_dir="$(cd "$new_dir" && pwd)"
	
	# We update the WORKSPACE_DIR line in this script
	if [[ "$OSTYPE" == "darwin"* ]]; then
		# macOS sed
		sed -i '' "s|^WORKSPACE_DIR=.*|WORKSPACE_DIR=\"$new_dir\"|" "$0"
	else
		# Linux sed
		sed -i "s|^WORKSPACE_DIR=.*|WORKSPACE_DIR=\"$new_dir\"|" "$0"
	fi
	
	echo "‚úÖ Workspace directory updated to: ${new_dir}"
	echo "üí° All new workspaces will be created here"
}

# This function displays usage information to help users understand the commands
show_help() {
	cat << EOF
AgentMasta - Workspace Management Tool for Vibecoders [v${VERSION}]

USAGE:
    agmst /workspace-name                   Create a new workspace with root instructions
    agmst A/workspace-name                  Create workspace with AGENTS.md only (from root)
    agmst c/workspace-name                  Create workspace with copilot-instructions.md only (from root)
    agmst /workspace-name !-profilename     Create a new workspace with instructions profile
    agmst !-profilename                     Replace instructions in current workspace with profile
    agmst del /workspace-name               Delete a workspace
    agmst del !-profilename                 Delete an instructions profile
    agmst proftypes                         Show instruction types for all profiles
    agmst wsdir                             Show current workspace directory
    agmst wsdir <path>                      Set workspace directory
    agmst install                           Install AgentMasta
    agmst uninstall                         Uninstall AgentMasta
    agmst help                              Show this help message
    agmst version                           Show version information

DESCRIPTION:
    Creates a new workspace folder with symlinks to your instructions files,
    and opens it in VS Code. Use / prefix for workspace names to distinguish
    them from profile commands.
    
    Type identifiers (A/ or c/) let you choose which root instructions file
    to use when creating workspaces. This is useful when you have both AGENTS.md
    and copilot-instructions.md in your [AgentMasta] root.
    
    Supports instructions profiles for different AI agents. Profiles are directories
    in [AgentMasta] that start with !- prefix (e.g., !-snt4.5, !-gpt5, !-hku4.5).
    
    For copilot-instructions.md, automatically creates .github/ directory.

INSTRUCTIONS PROFILES:
    Profiles let you maintain different instructions sets for different AI agents.
    All profile directories are stored as !-name format.
    
    Profile prefixes (for commands):
        !A-name                Create instructions profile with AGENTS.md only
        !c-name                Create instructions profile with copilot-instructions.md only
        !Ac-name OR !cA-name   Create instructions profile with both files
        !-name                 Use instructions profile. If non-existent, create it and prompt user for instructions type(s)
    
    Creating profiles:
        - Profiles auto-create if they don't exist
        - Profile directories always named !-name
        - Copy from root default instructions if available
        - Copy from another profile: !A-new=!-existing
        - Empty file created if no source available
    
    Examples:
        !A-snt4.5                          Create/use AGENTS.md profile
        !c-gpt5                            Create/use copilot profile
        !Ac-full                           Create/use both files profile
        !-custom                           Prompt for file type
        !A-new=!-existing                  Copy from existing profile

CONFIGURATION:
    Workspace directory is stored in the agmst script itself.
    Use 'agmst wsdir <path>' to change where workspaces are created.
    
    Default instructions are read from [AgentMasta] root directory.

EXAMPLES:${RESET}
    agmst /my-project                  # Creates workspace with root instructions (both files if both exist)
    agmst A/my-project                 # Creates workspace with AGENTS.md only (from root)
    agmst c/my-project                 # Creates workspace with copilot-instructions.md only (from root)
    agmst /my-project !A-snt4.5        # Creates workspace with AGENTS.md profile
    agmst /my-project !c-gpt5          # Creates workspace with copilot profile
    agmst !A-new=!-existing            # Replace instructions, copying from another profile
    agmst /!important-ws               # Creates workspace named "!important-ws" (! allowed with / prefix)
    agmst !A-gpt5                      # Replace instructions in current workspace
    agmst del /my-project              # Delete a workspace
    agmst del !-snt4.5                 # Delete an instructions profile
    agmst wsdir                        # Show workspace directory
    agmst wsdir ~/Projects             # Set workspace directory

${BOLD}MORE INFO:${RESET}
    https://github.com/xCORViSx/AgentMasta

EOF
}

# This function just prints the current version number
show_version() {
	echo "AgentMasta [v${VERSION}]"
	echo "Workspace Management Tool for Vibecoders"
}

# This function handles self-installation of the script
install_self() {
	echo "üì¶ Installing AgentMasta CLI tool..."
	
	# We store the current repository location before installation
	local repo_dir="$AGENTMASTA_ROOT"
	
	# We determine the best installation directory
	local install_dir="/usr/local/bin"
	
	# We create a temporary copy with the repo path embedded
	local temp_script=$(mktemp)
	sed "s|AGENTMASTA_ROOT=\"__AGENTMASTA_ROOT_PLACEHOLDER__\"|AGENTMASTA_ROOT=\"${repo_dir}\"|" "$0" > "$temp_script"
	chmod +x "$temp_script"
	
	# We check if we can write to /usr/local/bin
	if [ ! -w "/usr/local/bin" ]; then
		echo "üîê Requesting sudo permissions for installation..."
		sudo mv "$temp_script" "${install_dir}/agmst"
		sudo chmod +x "${install_dir}/agmst"
	else
		mv "$temp_script" "${install_dir}/agmst"
		chmod +x "${install_dir}/agmst"
	fi
	
	echo "‚úÖ agmst installed to ${install_dir}/agmst"
	echo "üìÅ Repository linked to: ${repo_dir}"
	
	# We check if the installation directory is in PATH
	if [[ ":$PATH:" == *":${install_dir}:"* ]]; then
		echo "‚úÖ ${install_dir} is in your PATH"
	else
		echo "‚ö†Ô∏è  ${install_dir} is not in your PATH"
		echo "üí° Add this line to your shell configuration file:"
		echo "   export PATH=\"${install_dir}:\$PATH\""
		
		# We suggest the appropriate config file based on the user's shell
		if [ -n "$BASH_VERSION" ]; then
			echo "   (Add to ~/.bashrc or ~/.bash_profile)"
		elif [ -n "$ZSH_VERSION" ]; then
			echo "   (Add to ~/.zshrc)"
		fi
	fi
	
	echo ""
	echo "üéâ Installation complete!"
	echo ""
	echo "üìñ Quick Start:"
	echo "   1. Set workspace directory: agmst wsdir /path/to/workspaces"
	echo "   2. Create a workspace: agmst /my-project"
	echo "   3. View help: agmst help"
	
	exit 0
}

# This function handles uninstallation of the script
uninstall_self() {
	echo "üóëÔ∏è  Uninstalling AgentMasta CLI tool..."
	
	local install_dir="/usr/local/bin"
	local install_path="${install_dir}/agmst"
	
	# We check if agmst is installed
	if [ ! -f "$install_path" ]; then
		echo "‚ùå agmst is not installed at ${install_path}"
		exit 1
	fi
	
	# We ask for confirmation
	read -p "Remove ${install_path}? (y/N) " -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		echo "‚ùå Cancelled"
		exit 1
	fi
	
	# We remove the installed file
	if [ ! -w "$install_dir" ]; then
		echo "üîê Requesting sudo permissions for uninstallation..."
		sudo rm "$install_path"
	else
		rm "$install_path"
	fi
	
	echo "‚úÖ AgentMasta uninstalled successfully"
	echo "üí° Workspace directories and profiles remain unchanged"
	
	exit 0
}

# This function validates and creates profile directories if needed
# Profiles can start with !A- (AGENTS.md), !c- (copilot-instructions.md), !Ac-/!cA- (both), or !- (prompt/use existing)
# Identifiers (A, c, Ac, cA) are ONLY for creating new profiles
# All profile directories are stored as !-name regardless of command prefix
# Supports copying from another profile with = syntax: !A-new=!-existing
# Outputs: profile_path|created (where created is "true" or "false")
validate_profile() {
	local profile="$1"
	local profile_name=""
	local profile_type=""
	local source_profile=""
	local was_created="false"
	local is_creation_command=false
	
	# We check if the profile uses = syntax to copy from another profile
	if [[ "$profile" =~ ^(![Ac]+-[^=]+)=(!-[^=]+)$ ]]; then
		profile="${BASH_REMATCH[1]}"
		source_profile="${BASH_REMATCH[2]}"
	fi
	
	# We determine the profile type from the prefix and whether it's a creation command
	if [[ "$profile" =~ ^!Ac- ]] || [[ "$profile" =~ ^!cA- ]]; then
		profile_type="both"
		is_creation_command=true
		profile_name="${profile#!Ac-}"
		profile_name="${profile_name#!cA-}"
	elif [[ "$profile" =~ ^!A- ]]; then
		profile_type="agents"
		is_creation_command=true
		profile_name="${profile#!A-}"
	elif [[ "$profile" =~ ^!c- ]]; then
		profile_type="copilot"
		is_creation_command=true
		profile_name="${profile#!c-}"
	elif [[ "$profile" =~ ^!- ]]; then
		profile_type="prompt"
		is_creation_command=false
		profile_name="${profile#!-}"
	else
		echo "‚ùå Error: Profile must start with !A- (AGENTS.md), !c- (copilot), !Ac-/!cA- (both), or !- (prompt)" >&2
		echo "üí° Examples: !A-snt4.5, !c-gpt5, !Ac-full, !-custom" >&2
		return 1
	fi
	
	# We construct the full path to the profile directory
	local profile_path="${AGENTMASTA_ROOT}/!-${profile_name}"
	
	# We check if this is a creation command but profile already exists
	if $is_creation_command && [ -d "$profile_path" ]; then
		echo "‚ö†Ô∏è  Profile !-${profile_name} already exists" >&2
		echo "" >&2
		echo "Choose an option:" >&2
		echo "  1) Use existing profile" >&2
		echo "  2) Replace with new profile" >&2
		echo "  C) Cancel" >&2
		read -p "Choose (1/2/C): " choice
		case "$choice" in
			1)
				echo "‚úÖ Using existing profile !-${profile_name}" >&2
				# Continue with existing profile - skip creation
				;;
			2)
				echo "üóëÔ∏è  Replacing profile !-${profile_name}..." >&2
				rm -rf "$profile_path"
				was_created="true"
				# Will create new profile below
				;;
			[Cc])
				echo "‚ùå Cancelled" >&2
				return 1
				;;
			*)
				echo "‚ùå Invalid choice. Cancelled" >&2
				return 1
				;;
		esac
	fi
	
	# We check if the profile directory exists or needs to be created
	if [ ! -d "$profile_path" ] || [ "$was_created" = "true" ]; then
		# For prompt-type (!-), inform user that profile doesn't exist first
		if [ "$profile_type" = "prompt" ] && [ "$was_created" = "false" ]; then
			echo "‚ö†Ô∏è  Profile !-${profile_name} doesn't exist" >&2
			echo "üìã Create new instructions profile?" >&2
			echo "" >&2
		fi
		
		# Mark as created if it wasn't already
		if [ "$was_created" = "false" ]; then
			was_created="true"
		fi
		
		# Create directory if it doesn't exist
		mkdir -p "$profile_path"
		
		# We determine what to copy based on source
		if [ -n "$source_profile" ]; then
			# Copy from another profile
			local source_path="${AGENTMASTA_ROOT}/${source_profile}"
			if [ ! -d "$source_path" ]; then
				echo "‚ùå Error: Source profile ${source_profile} not found" >&2
				rm -rf "$profile_path"
				return 1
			fi
			
			# We copy all instructions files from source profile
			local copied=0
			if [ -f "${source_path}/AGENTS.md" ]; then
				cp "${source_path}/AGENTS.md" "${profile_path}/AGENTS.md"
				echo "‚úÖ Copied AGENTS.md from ${source_profile}" >&2
				copied=1
			fi
			if [ -f "${source_path}/copilot-instructions.md" ]; then
				cp "${source_path}/copilot-instructions.md" "${profile_path}/copilot-instructions.md"
				echo "‚úÖ Copied copilot-instructions.md from ${source_profile}" >&2
				copied=1
			fi
			
			if [ $copied -eq 0 ]; then
				echo "‚ùå Error: Source profile ${source_profile} has no instructions files" >&2
				rm -rf "$profile_path"
				return 1
			fi
		else
			# Create new profile - determine file type to create
			local file_type="$profile_type"
			if [ "$profile_type" = "prompt" ]; then
				# Ask user which type they want
				echo "Which instructions file type?" >&2
				echo "  1) AGENTS.md" >&2
				echo "  2) copilot-instructions.md" >&2
				echo "  3) Both" >&2
				echo "  D) Don't create" >&2
				read -p "Choose (1/2/3/D): " choice
				case "$choice" in
					1) file_type="agents" ;;
					2) file_type="copilot" ;;
					3) file_type="both" ;;
					[Dd]) 
						echo "‚ùå Cancelled" >&2
						rm -rf "$profile_path"
						return 1
						;;
					*) file_type="agents" ;;
				esac
			fi
			
			# We determine what content to copy from root
			local root_agents="${AGENTMASTA_ROOT}/AGENTS.md"
			local root_copilot="${AGENTMASTA_ROOT}/copilot-instructions.md"
			local has_agents_root=false
			local has_copilot_root=false
			
			[ -f "$root_agents" ] && has_agents_root=true
			[ -f "$root_copilot" ] && has_copilot_root=true
			
			# We create the appropriate instructions file(s) and copy content
			if [ "$file_type" = "agents" ] || [ "$file_type" = "both" ]; then
				# We determine what content to copy for AGENTS.md
				if $has_agents_root && $has_copilot_root; then
					# Both exist in root - copy from matching type (AGENTS.md)
					cp "$root_agents" "${profile_path}/AGENTS.md"
					echo "‚úÖ Created AGENTS.md (copied from root AGENTS.md)" >&2
				elif $has_agents_root; then
					# Only AGENTS.md in root - copy it
					cp "$root_agents" "${profile_path}/AGENTS.md"
					echo "‚úÖ Created AGENTS.md (copied from root AGENTS.md)" >&2
				elif $has_copilot_root; then
					# Only copilot in root - copy its content to AGENTS.md
					cp "$root_copilot" "${profile_path}/AGENTS.md"
					echo "‚úÖ Created AGENTS.md (copied content from root copilot-instructions.md)" >&2
				else
					# No root files - create empty
					touch "${profile_path}/AGENTS.md"
					echo "‚úÖ Created empty AGENTS.md" >&2
				fi
			fi
			
			if [ "$file_type" = "copilot" ] || [ "$file_type" = "both" ]; then
				# We determine what content to copy for copilot-instructions.md
				if $has_agents_root && $has_copilot_root; then
					# Both exist in root - copy from matching type (copilot-instructions.md)
					cp "$root_copilot" "${profile_path}/copilot-instructions.md"
					echo "‚úÖ Created copilot-instructions.md (copied from root copilot-instructions.md)" >&2
				elif $has_copilot_root; then
					# Only copilot in root - copy it
					cp "$root_copilot" "${profile_path}/copilot-instructions.md"
					echo "‚úÖ Created copilot-instructions.md (copied from root copilot-instructions.md)" >&2
				elif $has_agents_root; then
					# Only AGENTS.md in root - copy its content to copilot-instructions.md
					cp "$root_agents" "${profile_path}/copilot-instructions.md"
					echo "‚úÖ Created copilot-instructions.md (copied content from root AGENTS.md)" >&2
				else
					# No root files - create empty
					touch "${profile_path}/copilot-instructions.md"
					echo "‚úÖ Created empty copilot-instructions.md" >&2
				fi
			fi
			
			echo "" >&2
			echo "üí° Tip: Explicitly define instructions file(s) desired in new instructions profile:" >&2
			echo "   !A-profilename for AGENTS.md only" >&2
			echo "   !c-profilename for copilot-instructions.md only" >&2
			echo "   !Ac-profilename or !cA-profilename for both files" >&2
			echo "   !-profilename for user prompt (if profile non-existent)" >&2
			echo "üí° Append '=' to copy an existing profile: !A-new=!-existing" >&2
			echo "" >&2
		fi
	fi
	
	# We verify the profile now has at least one instructions file
	if [ ! -f "${profile_path}/AGENTS.md" ] && [ ! -f "${profile_path}/copilot-instructions.md" ]; then
		echo "‚ùå Error: Profile !-${profile_name} has no instructions files" >&2
		return 1
	fi
	
	# We return the valid profile path and whether it was created
	echo "${profile_path}|${was_created}"
	return 0
}

# This function creates symlinks for instruction files from a profile or default location
# It handles both AGENTS.md and copilot-instructions.md
# Supports filtering by type: "agents" (AGENTS.md only), "copilot" (copilot-instructions.md only), or "both" (default)
create_instruction_symlinks() {
	local workspace_path="$1"
	local instructions_source_dir="$2"
	local file_type="${3:-both}"  # Default to both if not specified
	
	# We determine the source description for display
	local source_description
	local dir_basename=$(basename "$instructions_source_dir")
	if [[ "$dir_basename" =~ ^!- ]]; then
		# It's a profile directory (basename starts with !-)
		source_description="from instructions profile: '${dir_basename}'"
	else
		# It's the root directory
		source_description="from [AgentMasta] root"
	fi
	
	# We check for AGENTS.md and symlink it to workspace root (if type allows)
	if [ -f "${instructions_source_dir}/AGENTS.md" ] && [[ "$file_type" == "agents" || "$file_type" == "both" ]]; then
		echo "üîó Creating symlink to AGENTS.md (${source_description})..."
		ln -sf "${instructions_source_dir}/AGENTS.md" "${workspace_path}/AGENTS.md"
	fi
	
	# We check for copilot-instructions.md and symlink it to .github/ directory (if type allows)
	if [ -f "${instructions_source_dir}/copilot-instructions.md" ] && [[ "$file_type" == "copilot" || "$file_type" == "both" ]]; then
		echo "üìÅ Creating .github directory for copilot-instructions.md..."
		mkdir -p "${workspace_path}/.github"
		echo "üîó Creating symlink to copilot-instructions.md (${source_description})..."
		ln -sf "${instructions_source_dir}/copilot-instructions.md" "${workspace_path}/.github/copilot-instructions.md"
	fi
}

# This function replaces instruction symlinks in the current workspace
replace_instructions_in_current() {
	local profile="$1"
	
	# We validate the profile
	local profile_result
	profile_result=$(validate_profile "$profile")
	if [ $? -ne 0 ]; then
		exit 1
	fi
	
	# We parse the result (path|created)
	local profile_path="${profile_result%|*}"
	local profile_was_created="${profile_result#*|}"
	
	# We extract just the profile directory name for display
	local profile_display
	profile_display=$(basename "$profile_path")
	
	# We check if we're in a directory (current workspace)
	local current_dir="$(pwd)"
	
	# We show appropriate message based on whether profile was created
	if [ "$profile_was_created" = "true" ]; then
		echo "üìã Created new profile: ${profile_display}"
	fi
	
	# We ask for confirmation before replacing
	echo "üìã Current directory: ${current_dir}"
	echo "üîÑ This will replace instruction symlinks with profile: ${profile_display}"
	read -p "Continue? (y/N) " -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		echo "‚ùå Cancelled"
		exit 1
	fi
	
	# We remove existing instruction symlinks/files
	echo "üóëÔ∏è  Removing existing instruction files..."
	rm -f "${current_dir}/AGENTS.md"
	rm -rf "${current_dir}/.github/copilot-instructions.md"
	
	# We create new symlinks from the profile
	create_instruction_symlinks "$current_dir" "$profile_path"
	
	echo "‚úÖ Instructions replaced with profile: ${profile_display}"
}

# This function creates a new workspace with optional profile and optional type filter
# Type prefix A/ creates AGENTS.md only, c/ creates copilot-instructions.md only
create_workspace() {
	local workspace_name="$1"
	local profile="$2"
	local file_type="both"  # Default to both files
	
	# We check if workspace_name has a type prefix (A/ or c/)
	if [[ "$workspace_name" =~ ^A/ ]]; then
		file_type="agents"
		workspace_name="${workspace_name#A/}"  # Remove A/ prefix
	elif [[ "$workspace_name" =~ ^c/ ]]; then
		file_type="copilot"
		workspace_name="${workspace_name#c/}"  # Remove c/ prefix
	fi
	
	# We construct the full path to the new workspace
	local workspace_path="${WORKSPACE_DIR}/${workspace_name}"
	
	# We check if the workspace directory already exists
	if [ -d "$workspace_path" ]; then
		echo "‚ùå Error: Workspace '${workspace_name}' already exists at: ${workspace_path}"
		exit 1
	fi
	
	# We determine the instructions source directory
	local instructions_source_dir
	local profile_was_created="false"
	if [ -n "$profile" ]; then
		# We validate and use the profile
		local profile_result
		profile_result=$(validate_profile "$profile")
		if [ $? -ne 0 ]; then
			exit 1
		fi
		
		# We parse the result (path|created)
		instructions_source_dir="${profile_result%|*}"
		profile_was_created="${profile_result#*|}"
		
		# Note: We don't show "Creating/Using profile" here as the symlink message already indicates the source
	else
		# We use the default instructions directory (repo root)
		instructions_source_dir="$AGENTMASTA_ROOT"
		
		# We check if the requested file type exists in repo root
		local has_requested_file=false
		if [ "$file_type" = "agents" ] && [ -f "${AGENTMASTA_ROOT}/AGENTS.md" ]; then
			has_requested_file=true
		elif [ "$file_type" = "copilot" ] && [ -f "${AGENTMASTA_ROOT}/copilot-instructions.md" ]; then
			has_requested_file=true
		elif [ "$file_type" = "both" ] && { [ -f "${AGENTMASTA_ROOT}/AGENTS.md" ] || [ -f "${AGENTMASTA_ROOT}/copilot-instructions.md" ]; }; then
			has_requested_file=true
		fi
		
		if ! $has_requested_file; then
			if [ "$file_type" = "agents" ]; then
				# Check if copilot-instructions.md exists for option 2
				local has_copilot_alternative=false
				[ -f "${AGENTMASTA_ROOT}/copilot-instructions.md" ] && has_copilot_alternative=true
				
				if $has_copilot_alternative; then
					echo "‚ö†Ô∏è  Warning: No AGENTS.md found in [AgentMasta] root (but copilot-instructions.md exists)"
				else
					echo "‚ö†Ô∏è  Warning: No AGENTS.md found in [AgentMasta] root (or alternative copilot-instructions.md)"
				fi
				echo ""
				
				echo "Choose an option:"
				echo "  1) Create empty AGENTS.md in [AgentMasta] root"
				if $has_copilot_alternative; then
					echo "  2) Copy contents from copilot-instructions.md to new AGENTS.md"
					echo "  3) Continue without instructions file"
					echo "  C) Cancel"
					read -p "Choose (1/2/3/C): " choice
				else
					echo "  2) Continue without instructions file"
					echo "  C) Cancel"
					read -p "Choose (1/2/C): " choice
				fi
				
				case "$choice" in
					1)
						touch "${AGENTMASTA_ROOT}/AGENTS.md"
						echo "‚úÖ Created empty AGENTS.md in [AgentMasta] root"
						;;
					2)
						if $has_copilot_alternative; then
							cp "${AGENTMASTA_ROOT}/copilot-instructions.md" "${AGENTMASTA_ROOT}/AGENTS.md"
							echo "‚úÖ Created AGENTS.md with contents from copilot-instructions.md"
						else
							echo "‚ö†Ô∏è  Continuing without instructions file..."
						fi
						;;
					3)
						if $has_copilot_alternative; then
							echo "‚ö†Ô∏è  Continuing without instructions file..."
						else
							echo "‚ùå Invalid choice. Cancelled"
							exit 1
						fi
						;;
					[Cc])
						echo "‚ùå Cancelled"
						exit 1
						;;
					*)
						echo "‚ùå Invalid choice. Cancelled"
						exit 1
						;;
				esac
			elif [ "$file_type" = "copilot" ]; then
				# Check if AGENTS.md exists for option 2
				local has_agents_alternative=false
				[ -f "${AGENTMASTA_ROOT}/AGENTS.md" ] && has_agents_alternative=true
				
				if $has_agents_alternative; then
					echo "‚ö†Ô∏è  Warning: No copilot-instructions.md found in [AgentMasta] root (but AGENTS.md exists)"
				else
					echo "‚ö†Ô∏è  Warning: No copilot-instructions.md found in [AgentMasta] root (or alternative AGENTS.md)"
				fi
				echo ""
				
				echo "Choose an option:"
				echo "  1) Create empty copilot-instructions.md in [AgentMasta] root"
				if $has_agents_alternative; then
					echo "  2) Copy contents from AGENTS.md to new copilot-instructions.md"
					echo "  3) Continue without instructions file"
					echo "  C) Cancel"
					read -p "Choose (1/2/3/C): " choice
				else
					echo "  2) Continue without instructions file"
					echo "  C) Cancel"
					read -p "Choose (1/2/C): " choice
				fi
				
				case "$choice" in
					1)
						touch "${AGENTMASTA_ROOT}/copilot-instructions.md"
						echo "‚úÖ Created empty copilot-instructions.md in [AgentMasta] root"
						;;
					2)
						if $has_agents_alternative; then
							cp "${AGENTMASTA_ROOT}/AGENTS.md" "${AGENTMASTA_ROOT}/copilot-instructions.md"
							echo "‚úÖ Created copilot-instructions.md with contents from AGENTS.md"
						else
							echo "‚ö†Ô∏è  Continuing without instructions file..."
						fi
						;;
					3)
						if $has_agents_alternative; then
							echo "‚ö†Ô∏è  Continuing without instructions file..."
						else
							echo "‚ùå Invalid choice. Cancelled"
							exit 1
						fi
						;;
					[Cc])
						echo "‚ùå Cancelled"
						exit 1
						;;
					*)
						echo "‚ùå Invalid choice. Cancelled"
						exit 1
						;;
				esac
			else
				echo "‚ö†Ô∏è  Warning: No instructions files found in [AgentMasta] root"
				echo ""
				echo "Choose an option:"
				echo "  1) Create empty AGENTS.md"
				echo "  2) Create empty copilot-instructions.md"
				echo "  3) Create both files"
				echo "  4) Continue without instructions files"
				echo "  C) Cancel"
				read -p "Choose (1/2/3/4/C): " choice
				case "$choice" in
					1)
						touch "${AGENTMASTA_ROOT}/AGENTS.md"
						echo "‚úÖ Created empty AGENTS.md in [AgentMasta] root"
						;;
					2)
						touch "${AGENTMASTA_ROOT}/copilot-instructions.md"
						echo "‚úÖ Created empty copilot-instructions.md in [AgentMasta] root"
						;;
					3)
						touch "${AGENTMASTA_ROOT}/AGENTS.md"
						touch "${AGENTMASTA_ROOT}/copilot-instructions.md"
						echo "‚úÖ Created empty AGENTS.md and copilot-instructions.md in [AgentMasta] root"
						;;
					4)
						echo "‚ö†Ô∏è  Continuing without instructions files..."
						;;
					[Cc])
						echo "‚ùå Cancelled"
						exit 1
						;;
					*)
						echo "‚ùå Invalid choice. Cancelled"
						exit 1
						;;
				esac
			fi
		fi
	fi
	
	# We create the workspace directory
	echo "üìÅ Creating workspace directory: ${workspace_path}"
	mkdir -p "$workspace_path"
	
	# We create symlinks from the determined source directory with file type filter
	create_instruction_symlinks "$workspace_path" "$instructions_source_dir" "$file_type"
	
	# We check if VS Code is available
	if command -v code &> /dev/null; then
		# We open the workspace in VS Code
		echo "üöÄ Opening workspace in VS Code..."
		code "$workspace_path"
		echo "‚úÖ Workspace '${workspace_name}' created and opened successfully!"
	else
		# We inform the user that VS Code wasn't found
		echo "‚ö†Ô∏è  VS Code command 'code' not found in PATH"
		echo "‚úÖ Workspace '${workspace_name}' created at: ${workspace_path}"
		echo "üí° Tip: Install VS Code CLI with: code --install"
	fi
}

# This function deletes a workspace directory
delete_workspace() {
	local workspace_name="$1"
	
	# We construct the full path to the workspace
	local workspace_path="${WORKSPACE_DIR}/${workspace_name}"
	
	# We check if the workspace directory exists
	if [ ! -d "$workspace_path" ]; then
		echo "‚ùå Error: Workspace '${workspace_name}' doesn't exist at: ${workspace_path}"
		exit 1
	fi
	
	# We show what will be deleted and ask for confirmation
	echo "‚ö†Ô∏è  About to delete workspace: ${workspace_name}"
	echo "üìÅ Path: ${workspace_path}"
	read -p "Are you sure? (y/N) " -n 1 -r
	echo
	
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		echo "‚ùå Cancelled"
		exit 1
	fi
	
	# We delete the workspace directory
	rm -rf "$workspace_path"
	echo "‚úÖ Workspace '${workspace_name}' deleted successfully"
}

# This function deletes an instructions profile
delete_profile() {
	local profile_name="$1"
	
	# We normalize the profile name to !-name format
	if [[ "$profile_name" =~ ^![Ac]*-(.+)$ ]]; then
		# Extract the name part after the prefix
		profile_name="${BASH_REMATCH[1]}"
	elif [[ "$profile_name" =~ ^!-(.+)$ ]]; then
		# Already in !-name format, extract just the name
		profile_name="${BASH_REMATCH[1]}"
	fi
	
	# We construct the profile directory path (always !-name format)
	local profile_path="${AGENTMASTA_ROOT}/!-${profile_name}"
	
	# We check if the profile exists
	if [ ! -d "$profile_path" ]; then
		echo "‚ùå Error: Profile '!-${profile_name}' doesn't exist"
		exit 1
	fi
	
	# We show what will be deleted and ask for confirmation
	echo "‚ö†Ô∏è  About to delete profile: !-${profile_name}"
	echo "üìÅ Path: ${profile_path}"
	
	# We list the files that will be deleted
	if [ -f "${profile_path}/AGENTS.md" ] || [ -f "${profile_path}/.github/copilot-instructions.md" ]; then
		echo "üìÑ Contains:"
		[ -f "${profile_path}/AGENTS.md" ] && echo "   - AGENTS.md"
		[ -f "${profile_path}/.github/copilot-instructions.md" ] && echo "   - copilot-instructions.md"
	fi
	
	read -p "Are you sure? (y/N) " -n 1 -r
	echo
	
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		echo "‚ùå Cancelled"
		exit 1
	fi
	
	# We delete the profile directory
	rm -rf "$profile_path"
	echo "‚úÖ Profile '!-${profile_name}' deleted successfully"
}

# This function displays the current configuration to the user
show_config() {
	# We display the configuration in a readable format
	cat << EOF

${BOLD}${CYAN}üìã Current AgentMasta Configuration:${RESET}

${BOLD}Workspace Directory:${RESET}     ${GREEN}${WORKSPACE_DIR}${RESET}

${DIM}To change workspace directory, run:${RESET} agmst wsdir <path>

EOF
}

# This function displays all profiles with their instruction types in ls-like format
show_profile_types() {
	echo "üìã Instructions Profiles:"
	echo ""
	
	# We check if there are any profiles
	local profile_count=0
	local profiles=()
	
	# We scan for profile directories (start with !-)
	for profile_dir in "${AGENTMASTA_ROOT}"/!-*; do
		if [ -d "$profile_dir" ]; then
			profile_count=$((profile_count + 1))
			profiles+=("$profile_dir")
		fi
	done
	
	# We check if any profiles exist
	if [ $profile_count -eq 0 ]; then
		echo "No profiles found."
		echo ""
		echo "üí° Create a profile with: agmst !A-profilename (AGENTS.md only)"
		echo "                          agmst !c-profilename (copilot-instructions.md only)"
		echo "                          agmst !Ac-profilename (both files)"
		return
	fi
	
	# We find the longest profile name for alignment
	local max_length=0
	for profile_dir in "${profiles[@]}"; do
		local profile_name=$(basename "$profile_dir")
		local name_length=${#profile_name}
		if [ $name_length -gt $max_length ]; then
			max_length=$name_length
		fi
	done
	
	# We display each profile with its instruction types
	for profile_dir in "${profiles[@]}"; do
		local profile_name=$(basename "$profile_dir")
		local type_indicator=""
		
		# We check which instruction files exist
		local has_agents=false
		local has_copilot=false
		
		[ -f "${profile_dir}/AGENTS.md" ] && has_agents=true
		[ -f "${profile_dir}/copilot-instructions.md" ] && has_copilot=true
		
		# We determine the type indicator
		if $has_agents && $has_copilot; then
			type_indicator="Ac"
		elif $has_agents; then
			type_indicator="A"
		elif $has_copilot; then
			type_indicator="c"
		else
			type_indicator="--"  # No instruction files (shouldn't happen normally)
		fi
		
		# We calculate padding for alignment
		local padding=$((max_length - ${#profile_name} + 4))
		local spaces=$(printf '%*s' "$padding" '')
		
		# We display the profile with aligned type indicator
		echo "${profile_name}${spaces}${type_indicator}"
	done
	
	echo ""
	echo "Legend: A = AGENTS.md only, c = copilot-instructions.md only, Ac = both files"
}

# This is the main entry point of the script
# We parse the command-line arguments and route to the appropriate function
main() {
	# We get the first argument as the command
	local command="$1"
	local second_arg="$2"

	# We handle different commands with a case statement
	case "$command" in
		"")
			# We show help if no command is provided
			show_help
			;;
		help|--help|-h)
			# We show help for explicit help requests
			show_help
			;;
		version|--version|-v)
			# We show version information
			show_version
			;;
		install)
			# We handle self-installation
			install_self
			;;
		uninstall)
			# We handle uninstallation
			uninstall_self
			;;
		del|delete|rm)
			# We handle deletion of workspaces or profiles
			if [ -z "$second_arg" ]; then
				echo "‚ùå Error: Missing argument for del command"
				echo "üí° Usage: agmst del /workspace-name  OR  agmst del !-profilename"
				exit 1
			fi
			
			if [[ "$second_arg" =~ ^/ ]]; then
				# Delete workspace (remove leading /)
				delete_workspace "${second_arg#/}"
			elif [[ "$second_arg" =~ ^![Ac]*- ]]; then
				# Delete profile
				delete_profile "$second_arg"
			else
				echo "‚ùå Error: Invalid argument for del command: $second_arg"
				echo "üí° Workspace names must start with / (e.g., agmst del /my-project)"
				echo "üí° Profile names must start with !A-, !c-, or !- (e.g., agmst del !-snt4.5)"
				exit 1
			fi
			;;
		wsdir)
			# We handle workspace directory management
			if [ -z "$second_arg" ]; then
				# Show current workspace directory
				show_workspace_dir
			else
				# Set new workspace directory
				set_workspace_dir "$second_arg"
			fi
			;;
		proftypes)
			# We display all profiles with their instruction types
			show_profile_types
			;;
		!Ac-*|!cA-*|!A-*|!c-*|!-*)
			# We treat arguments starting with profile prefixes as profile for current workspace
			replace_instructions_in_current "$command"
			;;
		A/*|c/*)
			# We treat arguments starting with A/ or c/ as typed workspace names
			# A/ creates AGENTS.md only, c/ creates copilot-instructions.md only
			if [[ "$second_arg" =~ ^![Ac]*- ]]; then
				# Create workspace with profile (type prefix ignored when profile specified)
				local workspace_name="${command#*/}"  # Remove type prefix
				create_workspace "$workspace_name" "$second_arg"
			else
				# Create workspace with type filter from root
				create_workspace "$command"
			fi
			;;
		/*)
			# We treat arguments starting with / as workspace names
			# This allows workspace names to start with any character, including !
			local workspace_name="${command#/}"  # Remove leading /
			
			if [[ "$second_arg" =~ ^![Ac]*- ]]; then
				# Create workspace with profile
				create_workspace "$workspace_name" "$second_arg"
			else
				# Create workspace without profile (default instructions)
				create_workspace "$workspace_name"
			fi
			;;
		*)
			# Unrecognized command - show error and help
			echo "‚ùå Error: Unrecognized command: $command"
			echo "üí° Workspace names must start with / (e.g., agmst /my-project)"
			echo "üí° Profile names must start with !A-, !c-, or !- (e.g., agmst !A-snt4.5)"
			echo "üí° Run 'agmst help' for usage information"
			exit 1
			;;
	esac
}

# We call the main function with all script arguments
main "$@"
